[{"C:\\Users\\fabri\\Desktop\\gh-pages\\music_page\\src\\index.js":"1","C:\\Users\\fabri\\Desktop\\gh-pages\\music_page\\src\\App.js":"2","C:\\Users\\fabri\\Desktop\\gh-pages\\music_page\\src\\reportWebVitals.js":"3","C:\\Users\\fabri\\Desktop\\gh-pages\\music_page\\src\\components\\SpoltifyApp.js":"4","C:\\Users\\fabri\\Desktop\\gh-pages\\music_page\\src\\components\\SongComp.js":"5","C:\\Users\\fabri\\Desktop\\gh-pages\\music_page\\src\\components\\RegisterForm.js":"6","C:\\Users\\fabri\\Desktop\\gh-pages\\music_page\\src\\components\\Loader\\myLoader.js":"7","C:\\Users\\fabri\\Desktop\\gh-pages\\music_page\\src\\components\\Loader\\MyLoader.js":"8","C:\\Users\\fabri\\Desktop\\gh-pages\\music_page\\src\\components\\extra\\MyExtra.js":"9","C:\\Users\\fabri\\Desktop\\gh-pages\\music_page\\src\\components\\nav\\Nav.js":"10"},{"size":535,"mtime":1653410228967,"results":"11","hashOfConfig":"12"},{"size":987,"mtime":1657641912305,"results":"13","hashOfConfig":"12"},{"size":362,"mtime":1653402388297,"results":"14","hashOfConfig":"12"},{"size":8522,"mtime":1657637241066,"results":"15","hashOfConfig":"12"},{"size":2360,"mtime":1655236322626,"results":"16","hashOfConfig":"12"},{"size":2889,"mtime":1653967276757,"results":"17","hashOfConfig":"12"},{"size":831,"mtime":1654019516779,"results":"18","hashOfConfig":"12"},{"size":831,"mtime":1654019516779,"results":"19","hashOfConfig":"12"},{"size":138,"mtime":1654023432142,"results":"20","hashOfConfig":"12"},{"size":1145,"mtime":1657637155850,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"177ri2x",{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"25"},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"25"},"C:\\Users\\fabri\\Desktop\\gh-pages\\music_page\\src\\index.js",[],[],[],"C:\\Users\\fabri\\Desktop\\gh-pages\\music_page\\src\\App.js",["54","55","56","57"],[],"C:\\Users\\fabri\\Desktop\\gh-pages\\music_page\\src\\reportWebVitals.js",[],[],"C:\\Users\\fabri\\Desktop\\gh-pages\\music_page\\src\\components\\SpoltifyApp.js",["58","59"],[],"import React from 'react';\r\nimport SongComp from './SongComp';\r\nimport classes from './SongComp.module.css';\r\nimport RegisterForm from './RegisterForm';\r\nimport MyLoader from './Loader/MyLoader';\r\nimport Nav from './nav/Nav';\r\n\r\nconst SpoltifyApp = () => {\r\n    const [isRegistring, setIsRegistring] = React.useState(false);\r\n    const [User, setUser] = React.useState(localStorage.getItem('isLogged'));\r\n    const [songs, setSongs] = React.useState([]);\r\n    const [filtredSongs, setFiltredSongs] = React.useState([]);\r\n    const [artists, setArtists] = React.useState([]);\r\n    const [isLoading, setIsLoading] = React.useState(false);\r\n    const [hasError, setHasError] = React.useState('');\r\n\r\n    const localUser = localStorage.getItem('isLogged');\r\n    const localFilter = localStorage.getItem('filtred');\r\n\r\n    const fetching = React.useCallback(\r\n        async function () {\r\n            setIsRegistring(false);\r\n            if (!localUser) {\r\n                setFiltredSongs('');\r\n                localStorage.setItem('filtred', '');\r\n                setHasError('You need to register first!');\r\n                return null;\r\n            } else if (songs.length > 0 && filtredSongs.length === 0) {\r\n                setFiltredSongs(songs);\r\n                return null;\r\n            } else if (filtredSongs.length > 0 && songs.length > 0) {\r\n                if (localFilter) {\r\n                    setFiltredSongs(\r\n                        songs.filter((u) => u.author === localFilter)\r\n                    );\r\n                } else {\r\n                    setFiltredSongs(songs);\r\n                }\r\n                return null;\r\n            }\r\n            setIsRegistring(false);\r\n            setIsLoading(true);\r\n\r\n            const options = {\r\n                method: 'GET',\r\n                headers: {\r\n                    'X-RapidAPI-Key':\r\n                        '684f76f0f3msh78c59f0291915e8p1bc6c9jsn6b37b43baa62',\r\n                    'X-RapidAPI-Host': 'spotify23.p.rapidapi.com',\r\n                },\r\n            };\r\n\r\n            await fetch(\r\n                'https://spotify23.p.rapidapi.com/playlist_tracks/?id=37i9dQZF1DX4Wsb4d7NKfP&offset=0&limit=100',\r\n                options\r\n            )\r\n                .then((response) => response.json())\r\n                .then((response) => {\r\n                    console.log(response);\r\n                    const songis = [];\r\n                    const artis = [];\r\n                    for (const key in response) {\r\n                        if (key === 'items') {\r\n                            for (const song of response[key]) {\r\n                                songis.push({\r\n                                    id: song.track.id,\r\n                                    name: song.track.name,\r\n                                    authorUrl: song.track.artists[0].uri,\r\n                                    author: song.track.artists[0].name,\r\n                                    preview: song.track.preview_url,\r\n                                    img: song.track.album.images[0].url,\r\n                                    url: song.track.external_urls,\r\n                                    duration: song.track.duration_ms * 0.001,\r\n                                });\r\n                                artis.push(song.track.artists[0].name);\r\n                            }\r\n                        }\r\n                    }\r\n                    var result = [];\r\n                    artis.sort();\r\n                    artis.forEach((item) => {\r\n                        if (result.indexOf(item) < 0) {\r\n                            result.push(item);\r\n                        }\r\n                    });\r\n                    setArtists(result);\r\n                    setSongs(songis);\r\n                    if (localFilter === 'All' || !localFilter) {\r\n                        console.log('localFilter == All || \"\"');\r\n                        setFiltredSongs(songis);\r\n                    } else {\r\n                        setFiltredSongs(\r\n                            songis.filter((u) => u.author === localFilter)\r\n                        );\r\n                    }\r\n                })\r\n                .catch((err) => {\r\n                    console.error(err.message);\r\n                    setHasError(err.message);\r\n                });\r\n            setIsLoading(false);\r\n        },\r\n        [User, localFilter, songs]\r\n    );\r\n\r\n    React.useEffect(() => {\r\n        if (localUser === !!User) {\r\n            setUser(localUser);\r\n        }\r\n        if (localFilter) {\r\n            fetching();\r\n        }\r\n    }, []);\r\n\r\n    async function registration(name, pass, isRegistred) {\r\n        setIsRegistring(false);\r\n        setIsLoading(true);\r\n        setHasError('');\r\n        if (!isRegistred) {\r\n            const object = { Name: name, Password: pass };\r\n\r\n            try {\r\n                await fetch(\r\n                    'https://react-http-467cc-default-rtdb.firebaseio.com/users.json',\r\n                    {\r\n                        method: 'POST',\r\n                        body: JSON.stringify(object),\r\n                        headers: { 'Content-Type': 'application/json' },\r\n                    }\r\n                );\r\n            } catch (e) {\r\n                console.log(e.message);\r\n            }\r\n        } else {\r\n            alert('Welcome back ' + name);\r\n        }\r\n        setUser(name);\r\n        localStorage.setItem('isLogged', name);\r\n        setIsLoading(false);\r\n    }\r\n\r\n    const showForm = () => {\r\n        setIsRegistring(true);\r\n    };\r\n\r\n    const throwSongs = (e) => {\r\n        if (e.target.value === 'All') {\r\n            setFiltredSongs(songs);\r\n            localStorage.setItem('filtred', '');\r\n        } else {\r\n            const filtredSongss = songs.filter(\r\n                (u) => u.author === e.target.value\r\n            );\r\n            setFiltredSongs(filtredSongss);\r\n            localStorage.setItem('filtred', e.target.value);\r\n        }\r\n    };\r\n\r\n    const logoutHandler = () => {\r\n        setUser('');\r\n        setFiltredSongs([]);\r\n        localStorage.setItem('isLogged', '');\r\n        localStorage.setItem('filtred', '');\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Nav\r\n                loading={isLoading}\r\n                fetching={fetching}\r\n                showForm={showForm}\r\n                logoutHandler={logoutHandler}\r\n                user={User}\r\n            />\r\n            {!isRegistring ? (\r\n                <div className={isLoading ? classes.loading : ''}>\r\n                    {filtredSongs.length > 0 && User && (\r\n                        <div className={classes.filter}>\r\n                            <label>Filter by artist:</label>\r\n                            <select onChange={throwSongs}>\r\n                                <option key='All' value='All'>\r\n                                    All\r\n                                </option>\r\n                                {artists.map((e) => (\r\n                                    <option key={e} value={e}>\r\n                                        {e}\r\n                                    </option>\r\n                                ))}\r\n                            </select>\r\n                        </div>\r\n                    )}\r\n                    {isLoading && !hasError && (\r\n                        <div>\r\n                            <MyLoader />\r\n                        </div>\r\n                    )}\r\n                    <div className={classes.general}>\r\n                        {!hasError &&\r\n                            filtredSongs.length === 0 &&\r\n                            !isLoading &&\r\n                            !isRegistring && (\r\n                                <p id='nonFetchMsg'>\r\n                                    Songs list is empty, fetch to see some\r\n                                    music!\r\n                                </p>\r\n                            )}\r\n                        {hasError && <p>{hasError}</p>}\r\n                        {!isLoading &&\r\n                            !isRegistring &&\r\n                            filtredSongs.length > 0 &&\r\n                            User &&\r\n                            filtredSongs.map((e) => (\r\n                                <SongComp key={e.id} song={e} />\r\n                            ))}\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <RegisterForm submitionHandler={registration} />\r\n            )}\r\n        </React.Fragment>\r\n    );\r\n};\r\n\r\nexport default SpoltifyApp;\r\n","C:\\Users\\fabri\\Desktop\\gh-pages\\music_page\\src\\components\\SongComp.js",[],[],"C:\\Users\\fabri\\Desktop\\gh-pages\\music_page\\src\\components\\RegisterForm.js",[],[],"C:\\Users\\fabri\\Desktop\\gh-pages\\music_page\\src\\components\\Loader\\myLoader.js",[],[],"C:\\Users\\fabri\\Desktop\\gh-pages\\music_page\\src\\components\\Loader\\MyLoader.js",[],[],"C:\\Users\\fabri\\Desktop\\gh-pages\\music_page\\src\\components\\extra\\MyExtra.js",[],[],"C:\\Users\\fabri\\Desktop\\gh-pages\\music_page\\src\\components\\nav\\Nav.js",[],[],{"ruleId":"60","severity":1,"message":"61","line":1,"column":10,"nodeType":"62","messageId":"63","endLine":1,"endColumn":18},{"ruleId":"60","severity":1,"message":"64","line":2,"column":27,"nodeType":"62","messageId":"63","endLine":2,"endColumn":33},{"ruleId":"60","severity":1,"message":"65","line":4,"column":8,"nodeType":"62","messageId":"63","endLine":4,"endColumn":15},{"ruleId":"60","severity":1,"message":"66","line":11,"column":11,"nodeType":"62","messageId":"63","endLine":11,"endColumn":18},{"ruleId":"67","severity":1,"message":"68","line":103,"column":9,"nodeType":"69","endLine":103,"endColumn":35,"suggestions":"70"},{"ruleId":"67","severity":1,"message":"71","line":113,"column":8,"nodeType":"69","endLine":113,"endColumn":10,"suggestions":"72"},"no-unused-vars","'Suspense' is defined but never used.","Identifier","unusedVar","'Router' is defined but never used.","'MyExtra' is defined but never used.","'Routing' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useCallback has missing dependencies: 'filtredSongs.length' and 'localUser'. Either include them or remove the dependency array.","ArrayExpression",["73"],"React Hook React.useEffect has missing dependencies: 'User', 'fetching', 'localFilter', and 'localUser'. Either include them or remove the dependency array.",["74"],{"desc":"75","fix":"76"},{"desc":"77","fix":"78"},"Update the dependencies array to be: [filtredSongs.length, localFilter, localUser, songs]",{"range":"79","text":"80"},"Update the dependencies array to be: [User, fetching, localFilter, localUser]",{"range":"81","text":"82"},[4359,4385],"[filtredSongs.length, localFilter, localUser, songs]",[4578,4580],"[User, fetching, localFilter, localUser]"]